# -*- coding: utf-8 -*-
"""Diabetes_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1690dNx4SZZwtV4ZIRRg-BWmFmOXIAYCS

Importing the dependencies
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""Data Collection and Analysis

PIMA Diabetes Dataset

"""

# loading dataset to a pandas dataframe
diabetes_dataset = pd.read_csv('/content/diabetes.csv')

#printing first five rows of dataset
diabetes_dataset.head()

# number of rows and columns in this dataset
diabetes_dataset.shape

#getting statistical measures of the data
diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 --> non diabetic
1 ---> diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# seperating data and labels
X = diabetes_dataset.drop(columns = 'Outcome', axis=1)
Y = diabetes_dataset['Outcome']

print(X)

print(Y)

"""Data standardizaion - All values have different range, this helps to sort this issue."""

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data

print(X)
print(Y)

"""Train Test Split"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.1, stratify = Y, random_state = 2)

print(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

classifier = svm.SVC(kernel = 'linear')

# training support vector machine classifier
classifier.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score

"""

#Accuracy Score on training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy score of the training data: ', training_data_accuracy)

#Accuracy Score on test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy score of the test data: ', test_data_accuracy)

"""Making a Predictive system"""

input_data =(1,103,30,38,83,43.3,0.183,33)

#Changing input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)


std_data = scaler.transform(input_data_reshaped)
print(std_data)

prediction = classifier.predict(std_data)
print(prediction)

if (prediction[0]==0):
  print('not diabetic')
else:
  print('diabetic')

"""Saving trained model"""

